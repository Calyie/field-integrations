####
# SQLi
####

CONCLUSION sql-injection-attacker-controlled = FLOW DATA (attacker-controlled AND NOT encrypted AND NOT hashed AND NOT encoded AND NOT escaped) -> IO (sql)
WHEN CONCLUSION sql-injection-attacker-controlled => EMIT {
  title: "SQL Injection: Attacker-controlled data to SQL database {{via `$paramname`}} {{in `$methodname`}}",
  description: "Attacker controlled data is used in a SQL query without undergoing escaping or validation. This could allow an attacker to read sensitive data from the database, modify its content or gain control over the server.


## Countermeasures

This vulnerability can be prevented by using prepared statements on the attacker-controlled data.

## Additional information

**[CWE-89](https://cwe.mitre.org/data/definitions/89.html)**

**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
  category: "a1-injection",
  score: "9.0",
  vulnerability_description: "SQL Injection",
  owasp_link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  cwe_link: "https://cwe.mitre.org/data/definitions/89.html"
}

CONCLUSION sql-injection-http = FLOW IO (http OR $http) -> DATA (NOT encrypted AND NOT hashed AND NOT encoded AND NOT escaped) -> IO (sql)
WHEN CONCLUSION sql-injection-http => EMIT {
  title: "SQL Injection: HTTP data to SQL database {{via `$paramname`}} {{in `$methodname`}}",
  description: "HTTP data is used in a SQL query without undergoing escaping or validation. This could allow an attacker to read sensitive data from the database, modify its content or gain control over the server.


## Countermeasures

This vulnerability can be prevented by using prepared statements on the HTTP data.

## Additional information

**[CWE-89](https://cwe.mitre.org/data/definitions/89.html)**

**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
  category: "a1-injection",
  score: "9.0",
  vulnerability_description: "SQL Injection",
  owasp_link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  cwe_link: "https://cwe.mitre.org/data/definitions/89.html"
}

CONCLUSION sql-injection-ui = FLOW IO (ui) -> DATA (NOT encrypted AND NOT hashed AND NOT encoded AND NOT escaped) -> IO (sql)
WHEN CONCLUSION sql-injection-ui => EMIT {
  title: "SQL Injection: UI data to SQL database {{via `$paramname`}} {{in `$methodname`}}",
  description: "User-provided data is used in a SQL query without undergoing escaping or validation. This could allow an attacker to read sensitive data from the database, modify its content or gain control over the server.


## Countermeasures

This vulnerability can be prevented by using prepared statements on the user-provided data.

## Additional information

**[CWE-89](https://cwe.mitre.org/data/definitions/89.html)**

**[OWASP-A1](https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection)**",
  category: "a1-injection",
  score: "9.0",
  vulnerability_description: "SQL Injection",
  owasp_link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  link: "https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A1-Injection",
  cwe_link: "https://cwe.mitre.org/data/definitions/89.html"
}
